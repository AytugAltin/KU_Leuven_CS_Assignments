LTCvocabulary Arkham { 
    // DO NOT CHANGE
    type Time isa nat
    Start : Time
    partial Next(Time) : Time
    
    type number isa nat

    type location
    type district isa location
    type building isa location

    Move_To(Time, location)
    Close_Gate(Time)
    Attack(Time)

    Location(Time) : location
    I_Location : location

    type monsternb = {0..3} isa nat
    Monsters_In(Time, location) : monsternb
    Exit_Gate(Time, building)

    Clues(Time) : number

    Open_Gate(Time, building)
    C_Open_Gate(Time, building)
    Closed_Gate(Time, building)


    Has_Connection(location, location)


    type state constructed from {player_turn, monster_turn, won, lost}
    GameState(Time) : state
    Closed_To_Win : number
    Open_To_Lose : number

    //Add your own predicates here
    
    // Symmetric connection
    Connected(location, location)
    
    C_Location(Time, location)
    Cn_Location(Time, location)
    
    Max_Monsters : monsternb
    Max_Clues : number
    
    I_GameState : state
    Next_State(state) : state
    
    Game_Over(Time)
	Win(Time)
    Lose(Time)
    Stuck(Time)
    
    I_Clues : number
    C_Clues(Time, number)
    Cn_Clues(Time, number)
    Clues_To_Close : number
    
    I_Open_Gate(building)
    Cn_Open_Gate(Time, building)
    
    I_Closed_Gate(building)
    C_Closed_Gate(Time, building)
    Cn_Closed_Gate(Time, building)
    
    I_Monsters_In(location) : monsternb
    C_Monsters_In(Time, location, monsternb)
    Cn_Monsters_In(Time, location, monsternb)
    
    Monsters_Move_To(Time, district, monsternb)
    Monsters_Move_From_To(Time, location, district, monsternb)
}



theory T : Arkham {
    
    /*****************
     * Fix constants *
     *****************/
    
    Max_Monsters = 3.
    Max_Clues = 10.
    I_GameState = player_turn.
    ! l [location] : I_Monsters_In(l) = 0.
    Clues_To_Close = 2.
    I_Clues = 0.
    
    ~? b : I_Closed_Gate(b).
    ~? b : I_Open_Gate(b).
    
    
    /***************
     *     Town    *
     ***************/
    
    {
        ! l1 l2 : Connected(l1, l2) <- Has_Connection(l1, l2) | Has_Connection(l2, l1).
    }
    
    /****************
     *   GameState  *
     ****************/
    
    {
        GameState(Start) = I_GameState.
        ! t : GameState(Next(t)) = Next_State(GameState(t)) <- ~Win(Next(t)) & ~Lose(Next(t)).
        ! t : GameState(Next(t)) = won <- Win(Next(t)).
        ! t : GameState(Next(t)) = lost <- Lose(Next(t)).
    }
    
    {
        ! t : Game_Over(t) <- GameState(t) = won.
        ! t : Game_Over(t) <- GameState(t) = lost.
    }
    
    {
        Next_State(player_turn) = monster_turn.
        Next_State(monster_turn) = player_turn.
        Next_State(won) = won.
        Next_State(lost) = lost.
    }
    
    // Stuck defined as an event using past knowledge, i.e. that it was a monster turn.
    {
        ! t : Stuck(Next(t)) <- GameState(t) = monster_turn & 
        	~? l : Connected(l, Location(Next(t))) & Monsters_In(Next(t), l) < Max_Monsters.
    }
    
    // Win and lose defined as events
    {
        ! t : Lose(Next(t)) <- #{b [building] : Open_Gate(Next(t), b)} >= Open_To_Lose & ~Game_Over(t).
        ! t : Lose(t) <-  Stuck(t).
        ! t : Win(Next(t)) <- #{b [building] : Closed_Gate(Next(t), b)} >= Closed_To_Win & ~Game_Over(t).
    }
    
    
    /****************
     *   Location   *
     ****************/
    
    {
        Location(Start) = I_Location.
        ! t l : Location(Next(t)) = l <- C_Location(t, l).
        ! t l: Location(Next(t)) = l <- l = Location(t) & ~Cn_Location(t, l).
    }
    
    {
        ! t l : C_Location(t, l) <- Move_To(t, l).
        ! t l : Cn_Location(t, l) <- ? l1 : C_Location(t, l1) & l ~= l1.
    }
    
    ! t l : Move_To(t, l) => GameState(t) = player_turn. 
    ! t l : Move_To(t, l) => Connected(l, Location(t)).
    ! t l : Move_To(t, l) => Monsters_In(t, l) < Max_Monsters.
    
    ! t : GameState(t) = player_turn => ?=1 l : Move_To(t, l).
   
    
    /****************
     *     Clues    *
     ****************/
    
    {
        Clues(Start) = I_Clues.
        ! t n : Clues(Next(t)) = n <- C_Clues(t, n).
        ! t n : Clues(Next(t)) = n <- n = Clues(t) & ~Cn_Clues(t, n).
    }
    
    {
        ! t : C_Clues(t, Clues(t)-2) <- Close_Gate(t).
        ! t : C_Clues(t, min(10, Clues(t)+Monsters_In(t, Location(t)))) <- Attack(t).
        ! t : Cn_Clues(t, n) <- ? n1 : C_Clues(t, n1) & n1 ~= n.
    }
    
    
    /****************
     *     Gates    *
     ****************/
    
    {
        ! b : Open_Gate(Start, b) <- I_Open_Gate(b).
        ! t b : Open_Gate(Next(t), b) <- C_Open_Gate(t, b).
        ! t b : Open_Gate(Next(t), b) <- Open_Gate(t, b) & ~Cn_Open_Gate(t, b).        
    }
    
    {
        ! t b : Cn_Open_Gate(t, b) <- C_Closed_Gate(t, b).
    }
    
    {
        ! b : Closed_Gate(Start, b) <- I_Closed_Gate(b).
        ! t b : Closed_Gate(Next(t), b) <- C_Closed_Gate(t, b).
        ! t b : Closed_Gate(Next(t), b) <- Closed_Gate(t, b) & ~Cn_Closed_Gate(t, b).        
    }
    
    // Choice to give opening priority over closing, other way around or ignoring this case was fine as well.
    {
        ! t b : C_Closed_Gate(t, b) <- b = Location(t) & Close_Gate(t) & ~C_Open_Gate(t, b).
        ! t b : Cn_Closed_Gate(t, b) <- C_Open_Gate(t, b).
    }
    
    /****************
     *   Monsters   *
     ****************/
  
    {
        ! l : Monsters_In(Start, l) = I_Monsters_In(l).
        ! t l n : Monsters_In(Next(t), l) = n <- C_Monsters_In(t, l, n).
        ! t l n : Monsters_In(Next(t), l) = n <- n = Monsters_In(t, l) & ~Cn_Monsters_In(t, l, n).
    }
   
    {
        ! t l : C_Monsters_In(t, l, 0) <- GameState(t) = monster_turn & ~? n : C_Monsters_In(t, l, n) & n ~= 0.
        ! t b [building] : C_Monsters_In(t, b, 1) <- Exit_Gate(t, b).
        
        ! t d [district] n : C_Monsters_In(t, d, n) <- Monsters_Move_To(t, d, n).
        
        ! t : C_Monsters_In(t, Location(t), 0) <- Attack(t).
        
        ! t l n : Cn_Monsters_In(t, l, n) <- ? n1 : C_Monsters_In(t, l, n1) & n ~= n1.
    }
    
    // Preconditions and constraints for monstermovement.
    ! t l d n : Monsters_Move_From_To(t, l, d, n) => GameState(t) = monster_turn.
    ! t l d [district] n : Monsters_Move_From_To(t, l, d, n) => Connected(l, d).
    ! t l d [district] n : Monsters_Move_From_To(t, l, d, n) => l ~= d.
	! t l d [district] n : Monsters_Move_From_To(t, l, d, n) => n > 0.
    
    
    ! t : GameState(t) = monster_turn => 
   		! l [location] : sum{d [district] n [monsternb]: Monsters_Move_From_To(t, l, d, n) : n} = Monsters_In(t, l). 
    

    {
    	! t d m: Monsters_Move_To(t, d, m) <- 
        	m = sum{l [location] n [monsternb] : Monsters_Move_From_To(t, l, d, n) : n} &
        	GameState(t) = monster_turn.
    }
    
    ! t d n : Monsters_Move_To(t, d, n) => n =< Max_Monsters.
   
    {
        ! t b : Exit_Gate(t, b) <- Open_Gate(t,b) & GameState(t) = monster_turn.
    }
    
    /****************
     *    Actions   *
     ****************/
    
    ! t : Attack(t) => GameState(t) = player_turn.
    ! t : Attack(t) => Monsters_In(t, Location(t)) > 0.
    
    ! t : Close_Gate(t) => GameState(t) = player_turn.
    ! t : Close_Gate(t) => Open_Gate(t, Location(t)).
    ! t : Close_Gate(t) => Clues(t) >= Clues_To_Close.
    
    ! t : ~(Attack(t) & Close_Gate(t)).
    

}

theory TimeTheo : Arkham{
    { 
        Start = MIN[:Time].
        ! t : Next(t) = t + 1 <- Time(t+1). 
    }
}

procedure main() {
    check()
    allVerifications()
    show(Harder)
}


//Use this to visualise structure struc
procedure show(struc) {
    idpd3.init_idpd3();
    stdoptions.nbmodels = 1
	TH = clone(struc);
    setvocabulary(TH, Arkham);
    S = calculatedefinitions(merge(TimeTheo, T), TH)

    local model = modelexpand(T, S)[1];
    setvocabulary(model, V_out);
    local vis = merge(model, struc);
    local visModel = modelexpand(T_out, vis)[1];
	print(visModel)
    idpd3.visualise(visModel);
}


/************************************************
 *  Fill in the next part for the verifications *
 ************************************************/

procedure isSat(theo, struc) {
    T1 = merge(theo, T)
    T1 = merge(T1, TimeTheo)
    print(sat(T1, struc))
}

LTCvocabulary Reachability {
    extern vocabulary Arkham
    
    Reachable(location)
}

theory verification1: Reachability{
	{
        Reachable(I_Location).
        ! l: Reachable(l) <- ? l1 : Reachable(l1) & Connected(l1,l).
    }
    
    ! l : Reachable(l).
}

procedure verification1proc(struc){
	isSat(verification1, struc)
}

theory verification2: Arkham{
	? t : GameState(t) = won.
}

procedure verification2proc(struc){
	isSat(verification2, struc)
}

theory verification3: Arkham{
	? t : GameState(t) = lost.
}

procedure verification3proc(struc){
	isSat(verification3, struc)
}

term t : Arkham {
    #{t : GameState(t) = lost}
}


procedure verification4proc(struc){
	printmodels(minimize(T, struc, t))
}

theory verification5: Arkham{
	//Verify something here
}

procedure verification5proc(struc){
    print(" - winnable:")
	isSat(verification2, struc)
    print(" - losable:")
    isSat(verification3, struc)
}

theory verification6: Arkham{
	? t : (GameState(t) = lost | GameState(t) = won) & GameState(Next(t)) ~= GameState(t) & Time(Next(t)).
}

procedure verification6proc(struc){
	isSat(verification6, struc)
}

theory verification7: Arkham{
    ~? t : Attack(t).
    ? t : GameState(t) = won.
}

procedure verification7proc(struc){
	isSat(verification7, struc)
}

procedure allVerifications(){
    print("Easy is Reachable:")
    verification1proc(reduceVoc(Easy))
    print("Unplayable is Reachable:")
    verification1proc(reduceVoc(Unplayable))
    print("Impossible is winnable:")
    verification2proc(reduceVoc(Impossible))
    print("Unlosable is losable:")
    verification3proc(reduceVoc(Unlosable))
    print("Longest survival run in BoxedIn:")
    verification4proc(reduceVoc(BoxedIn))
    print("Easy is: ")
    verification5proc(reduceVoc(Easy))
    print("Harder is: ")
    verification5proc(reduceVoc(Harder))
    print("State can change once lost of won:")
    verification6proc(reduceVoc(Easy))
    print("Can win without attacking:")
    verification7proc(reduceVoc(Easy))
}
procedure reduceVoc(struc) {
    S = clone(struc)
    setvocabulary(S, Arkham)
    return S
}

// DO NOT change the includes
include "visualisation.idp"
include "TestInstances.idp"
include "Structures.idp"
include "idpd3/idpd3_voc.idp"
