/*
Skeleton for reversi
*/




vocabulary reversiVoc{
	type Time isa nat
    Start : Time
    partial Next(Time) : Time
    
    //Coordinates
	type xco isa int
	type yco isa int
	type position constructed from {pos(xco,yco)}
	
	//directions can be useful to reason with
	type direction constructed from {U,UR,R,DR,D,DL,L,UL}
	
	//The two colors in the game
	type player_color constructed from {black,white}
	
	//at(t,p,c) holds if at timepoint t, there is a stone of color c on position p
	at(Time,position,player_color)	
	
	//init- and cause predicates for at
	init_at(position,player_color)
	c_at(Time,position,player_color)	
	cn_at(Time,position,player_color)	
	
	//turn(t,c) holds if it is the turn of the player playing c at time point t. This should always alternate. 
	turn(Time,player_color)
	
	//play(t,p,c) holds if at time point t a stone of color c is added to position p
	play(Time,position,player_color)
	
	//winner(t,c) holds if the player with color c has won the game at time point t (or at some earlier point in time)	
	winner(Time,player_color)
	
	//possible(t,p) holds if it is allowed to play a stone on position p at time t. 
	possible(Time,position) 
	
	//attacked(t,p) holds iff the stone on position p is attacked by the current move 
	attacked(Time,position)
	
	// The game ended
	gameOver(Time) 
	
	//YOU WILL NEED EXTRA PREDICATES. Put them here. 
	
	
	
}

theory reversiTheory: reversiVoc{
	//Example constraint: there can be at most one color of stone at each location:
	! t[Time] p[position]: #{c[player_color]:at(t,p,c)} =< 1.
	
		

}

structure exampleS:reversiVoc{
//this is an example board you can play around with
Time = {0..14}
Start = 0
Next = {0->1;1->2;2->3;3->4;4->5;5->6;6->7;7->8;8->9;9->10;10->11;11->12;12->13;13->14}
 xco = {1..4}
 yco = {1..4}
 init_at = {
 	pos(2,2),white(); 
 	pos(2,3),black(); 
 	pos(3,2),black(); 
 	pos(3,3),white(); 
 }
}




//you might need to use an extended vocabulary for some of the verifications
vocabulary verificationVoc{
 	extern vocabulary reversiVoc
}

theory verification1: verificationVoc {
	//Verify something here
}

procedure verification1proc(struc){
	//Do something here: verify verification1 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification2: verificationVoc{
	//Verify something here
}

procedure verification2proc(struc){
	//Do something here: verify verification2 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification3: verificationVoc{
	//Verify something here
}

procedure verification3proc(struc){
	//Do something here: verify verification3 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification4: verificationVoc {
	//Verify something here
}

procedure verification4proc(struc){
	//Do something here: verify verification4 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification5: verificationVoc{
	//Verify something here
}

procedure verification5proc(struc){
	//Do something here: verify verification5 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification6: verificationVoc{
	//Verify something here
}

procedure verification6proc(struc){
	//Do something here: verify verification6 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}


procedure allVerifications(){
	strucToCheck = exampleS
	setvocabulary(strucToCheck,verificationVoc) 
	verification1proc(strucToCheck)
	verification2proc(strucToCheck)
	verification3proc(strucToCheck)
	verification4proc(strucToCheck)
	verification5proc(strucToCheck)
	verification6proc(strucToCheck)
}

include "visualisation.idp"
procedure visualiseOneModel(){
    local sol = onemodel(reversiTheory,exampleS)
    visualise(sol)
}



