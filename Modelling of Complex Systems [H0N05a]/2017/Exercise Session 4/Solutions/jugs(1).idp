vocabulary V {
	type Time isa nat
	partial Next(Time):Time
	Start:Time
    
	type Jug
	type Liters isa nat
	MaxContents(Jug): Liters
    
    type Action constructed from {Fill(Jug),Transfer(Jug,Jug,Liters),Empty(Jug)}
	do(Time, Action)
    
	Contents(Time,Jug):Liters
	C_Contents(Time,Jug,Liters)
	C_NContents(Time,Jug,Liters)
	I_Contents(Jug,Liters)
}

theory timeTheo:V{
	{
		Start = MIN[:Time].
		!t: Next(t) = t+1 <- Time(t+1).
	}
}

structure S : V {
	Time = {0..6}
	Jug = {J3;J5}
	Liters = {0..10}
	MaxContents = {J5->5;J3->3}
	I_Contents = {J3,0;J5,0;}
}

theory T : V {
	// Precond

	// Do not fill from empty jug (optional)
	!t[Time] jf jt l: do(t, Transfer(jf, jt, l)) => Contents(t, jf) > 0.

	// Do not fill self or full jug (optional)
	!t[Time] jf jt l: do(t, Transfer(jf, jt, l)) => ~(jf = jt).
	!t[Time] jt : do(t, Fill(jt)) => ~(Contents(t, jt) = MaxContents(jt)).
  	
	// Do not empty empty jug (optional)
	!t[Time] jf : do(t, Empty(jf)) => ~(Contents(t, jf) = 0).
  	
	//The number of liters should match the current situation
	!t[Time] jf jt l: do(t, Transfer(jf, jt, l)) => l =< Contents(t,jf).
	!t[Time] jf jt l: do(t, Transfer(jf, jt, l)) => l =< MaxContents(jt) - Contents(t,jt).
	!t[Time] jf jt l: do(t, Transfer(jf, jt, l)) => l = Contents(t,jf) | l = MaxContents(jt) - Contents(t,jt).

	// Inertia
	{
		!j: Contents(0,j) = x <- I_Contents(j,x).
		! t j x: Contents(Next(t),j) = x <- C_Contents(t,j,x).
		! t j x: Contents(Next(t),j) = x <- Contents(t,j) = x & ~C_NContents(t,j,x).
	}  

	//CAUSES
	{
        //If the content changes, all other values are no longer it's content.
		! t j x: C_NContents(t,j,x) <- C_Contents(t,j,x2 ) & x ~= x2. 
        
		! t j1 l1 : C_Contents(t, j1, l1) <- do(t, Fill(j1)) & MaxContents(j1) = l1.
		! t j1 : C_Contents(t, j1, 0) <- do(t, Empty(j1)) .
		! t j1 l1 : C_Contents(t, j1, l1) <- ?j2 l: do(t, Transfer(j1, j2, l)) & l1=Contents(t, j1) - l. 
		! t j2 l2 : C_Contents(t, j2, l2) <- ?j1 l: do(t, Transfer(j1, j2, l)) & l2=Contents(t, j2) + l. 
	}

	// Exactly one action in every timestep
    ! t : ?1 action: do(t,action).

	// Search for planning to 4 liters
	// Finding a plan/possible state is done by demanding this state
	?t[Time] j : Contents(t, j) = 4.
}


procedure main() {
	print(modelexpand(merge(T,timeTheo),S)[1])
}	

