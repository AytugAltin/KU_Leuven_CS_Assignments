LTCvocabulary Arkham { 
    // DO NOT CHANGE
    type Time isa nat
    Start : Time
    partial Next(Time) : Time
    
    type number isa nat

    type location
    type district isa location
    type building isa location

    Move_To(Time, location)
    Close_Gate(Time)
    Attack(Time)

    Location(Time) : location
    I_Location : location

    type monsternb = {0..3} isa nat
    Monsters_In(Time, location) : monsternb
    Exit_Gate(Time, building)

    Clues(Time) : number

    Open_Gate(Time, building)
    C_Open_Gate(Time, building)
    Closed_Gate(Time, building)


    Has_Connection(location, location)


    type state constructed from {player_turn, monster_turn, won, lost}
    GameState(Time) : state
    Closed_To_Win : number
    Open_To_Lose : number

    //Add your own predicates here
}



theory T : Arkham {
    
}

theory TimeTheo : Arkham{
    { 
        Start = MIN[:Time].
        !t : Next(t) = t + 1 <- Time(t+1). 
    }
}

procedure main() {
    show(Easy)
}


//Use this to visualise structure struc
procedure show(struc) {
    idpd3.init_idpd3();
    stdoptions.nbmodels = 1
	TH = clone(struc);
    setvocabulary(TH, Arkham);
    S = calculatedefinitions(merge(TimeTheo, T), TH)
    
    local model = modelexpand(T, S)[1];
    setvocabulary(model, V_out);
    local vis = merge(model, struc);
    local visModel = modelexpand(T_out, vis)[1];
	print(visModel)
    idpd3.visualise(visModel);
}


/************************************************
 *  Fill in the next part for the verifications *
 ************************************************/

theory verification1: Arkham{
	//Verify something here
}

procedure verification1proc(struc){
    T1 = merge(T, verification1) // You can use this to merge two theories, i.e. T1 is the combination of theory verification1 and theory T.
    
	//Do something here: verify verification1 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification2: Arkham{
	//Verify something here
}

procedure verification2proc(struc){
	//Do something here: verify verification2 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification3: Arkham{
	//Verify something here
}

procedure verification3proc(struc){
	//Do something here: verify verification3 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}


procedure verification4proc(struc){
	//Do something here. 
}

theory verification5: Arkham{
	//Verify something here
}

procedure verification5proc(struc){
	//Do something here: verify verification5 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}
theory verification6: Arkham{
	//Verify something here
}

procedure verification6proc(struc){
	//Do something here: verify verification6 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification7: Arkham{
    //Verify something here
}

procedure verification7proc(struc){
	//Do something here: verify verification7 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

procedure allVerifications(){
    verification1proc(reduceVoc(Easy))
    verification1proc(reduceVoc(Unplayable))
    verification2proc(reduceVoc(Impossible))
    verification3proc(reduceVoc(Unlosable))
    verification4proc(reduceVoc(BoxedIn))
    verification5proc(reduceVoc(Easy))
    verification5proc(reduceVoc(Harder))
    verification6proc(reduceVoc(Easy))
    verification7proc(reduceVoc(Easy))
}

// Use this to map the vocabulary of the structures back to the Arkham vocabulary.
procedure reduceVoc(struc) {
    S = clone(struc)
    setvocabulary(S, Arkham)
    return S
}


// DO NOT change the includes
include "visualisation.idp"
include "TestInstances.idp"
include "Structures.idp"
include "idpd3/idpd3_voc.idp"
