vocabulary V {
	type Time isa nat
	Start:Time
	partial Next(Time):Time

	type Plate

	//Fluents
	Clean(Plate,Time)
  	I_Clean(Plate)
	C_Clean(Plate,Time)
	C_nClean(Plate,Time)
	
	// Actions
	CleanPlate(Plate,Time)
	UsePlate(Plate,Time)
}

structure S : V {
  	Time = {0..5}
	Plate = {P1; P2; P3; P4}
	I_Clean = {P1; P2; P3; P4}
}


theory timeTheo:V{
	{
		Start = MIN[:Time].
		!t: Next(t) = t+1 <- Time(t+1).
	}
}

theory T : V {
// Preconditions

  {
	// Successor State Axiom
  }

  {	
	// Causes
  }
	
	//(Maybe, you can only clean one plate at a time?)
	
	
	
}	

theory allDirty : V{
	// Is it possible to make all your plates dirty?
}


include <mx>
procedure main() {
	S=calculatedefinitions(timeTheo,S)
	local allconstraints = merge(T,allDirty)
	print("This is the merged theory:")
	print(allconstraints)
	print("Searching for a model")
	print(onemodel(allconstraints,S))
}
