vocabulary V{
	type Position isa int
	type Time isa int
	type Remote

	PushOpen(Time, Remote)
	PushClose(Time, Remote)
	
	Min:Position
	Max:Position
	Pos(Time,Position)
	InitPos:Position
	C_Pos(Time,Position)
	C_NPos(Time,Position)

	//Creating "causes-predicates" for opening and closing might be useful ;-) 
	//Do this as an exercise
	Opening(Time)
	Closing(Time)

}

theory T:V{
	//!t : ?1p: Pos(t,p).

	{
		Pos(0,x) <- InitPos = x.
		! x t: Pos(t+1,x) <- C_Pos(t,x).
		! x t: Pos(t+1,x) <- Pos(t,x) & ~C_NPos(t,x).


		!x t: C_Pos(t,x+1) <- Opening(t) & Pos(t,x).
		!x t: C_Pos(t,x-1) <- Closing(t) & Pos(t,x).
		!x t: C_NPos(t,x) <- C_Pos(t,y) & x ~= y.
		
		Opening(t+1) <- PushOpen(t,x) & ~Pos(t,Max).
		Closing(t+1) <- PushClose(t,x) &  ~Pos(t,Min).
		Opening(t+1) <- Opening(t) & ~Pos(t,Max) & ~ (? x: PushClose(t,x)).
		Closing(t+1) <- Closing(t) & ~Pos(t,Min) & ~ (? x: PushOpen(t,x)).	
		
	}

}

structure S:V{
	Position= {1..5}
	Min = 1
	Max = 5
	Time = {0..15}
	Remote = {A;B}
	InitPos = 1
	PushOpen = {1,A;12,B}
	PushClose = {10,A}
}

procedure main() {
	print(modelexpand(T,S)[1])
}
