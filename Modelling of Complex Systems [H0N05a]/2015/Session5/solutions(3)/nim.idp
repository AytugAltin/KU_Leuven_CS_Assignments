vocabulary V{
	
	type  Time isa int
	type Player 
	type Matches isa int
	type Heap
	
	I_Nb(Heap,Matches)
	C_Nb(Heap,Matches,Time)
	C_nNb(Heap,Matches,Time)
	
	Nb(Heap,Time): Matches
	
	Turn(Player,Time)
	I_Turn(Player)
	Winner(Player,Time)
	GameOver(Time)
	
	// action
	Takes(Player,Heap,Matches,Time)
}
	
structure Big:V{
	Time  = {0..17}
	Player = {P1;P2}
	I_Turn = {P1}
	Matches = {0..7}
	Heap = {H1;H2;H3;H4}
	I_Nb = {H1,1;H2,3;H3,5;H4,7}
	
}

structure P1Wins:V{
	Time  = {0..17}
	Player = {P1;P2}
	I_Turn = {P1}
	Matches = {0..7}
	Heap = {H1;H2;H3;H4}
	I_Nb = {H1,1;H2,3;H3,5;H4,7}
	Winner<ct> = {P1,17}
	
}

structure P2Wins:V{
	Time  = {0..17}
	Player = {P1;P2}
	I_Turn = {P1}
	Matches = {0..7}
	Heap = {H1;H2;H3;H4}
	I_Nb = {H1,1;H2,3;H3,5;H4,7}
	Winner<ct> = {P2,17}
	
}




structure Small:V{
	Time  = {0..17}
	Player = {P1;P2}
	I_Turn = {P1}
	Matches = {0..5}
	Heap = {H1;H2;H3}
	I_Nb = {H1,1;H2,3;H3,5}
	
}


theory T:V{
	{
		! h m[Matches] t[Time]: Nb(h,0) = m <- I_Nb(h,m).
		! h m[Matches] t[Time]: Nb(h,t+1) = m <- C_Nb(h,m,t).
		! h m[Matches] t[Time]: Nb(h,t+1) = m <- Nb(h,t) = m & ~ C_nNb(h,m,t).
	}

	{
		! h m[Matches] t: C_Nb(h,m,t)  <- ? p n[Matches] : Takes(p,h,n,t) & m = Nb(h,t) - n.
		! h m[Matches] t: C_nNb(h,m,t) <- ? p n[Matches] : Takes(p,h,n,t).
	}

	

	//Preconditions and axioms for takes
	! p h m[Matches] t: Takes(p,h,m,t) => ( m >0 & m=< Nb(h,t) ).
	! p h1 h2 m1 m2 t : Takes(p,h1,m1,t) & Takes(p,h2,m2,t) => h1 = h2 & m1 = m2. 
	! p h m t: Takes(p,h,m,t) => Turn(p,t).
	! p t: Turn(p,t) => (? h m : Takes(p,h,m,t)) | GameOver(t). 
	
	{
		Turn(p,t+1) <-  ~GameOver(t) & ~Turn(p,t).
		Turn(p,t+1) <-  GameOver(t) & Turn(p,t). //Bij gameover, blijft zelfde speler aan de beurt
		Turn(p,0) <- I_Turn(p).
		Winner(p,t) <- GameOver(t) & Turn(p,t). 
	}
	
	! t : GameOver(t) <=> ! h : Nb(h,t) = 0.
}



theory morePlayersOnTurn:V{
	? t : !p : Turn(p,t) & Turn(p,t).
}

theory gameNotComingToAnEnd:V{
	! t : ~ GameOver(t).
}

theory gameOverButNotEmpty:V{
	? t h m[Matches] : GameOver(t) & Nb(h,t) > 0.
}


theory canEndInOneStep:V{
	GameOver(1).
}

theory entailedFormula:V{
	//Is 	~? h1 nr1 : Takes(P1,h1,nr1,0) => GameOver(1). entailed? Add negation of this formula to the theory
	? h1 nr1 : Takes(P1,h1,nr1,0) => GameOver(1).
}

	
procedure main(){

	T3 = merge(T,morePlayersOnTurn)
	T4 = merge(T,gameNotComingToAnEnd)
	T5 = merge(T,gameOverButNotEmpty)
	T6 = merge(T,canEndInOneStep)
	T7 = merge(T,entailedFormula)
	if sat(T,P1Wins) and sat(T,P2Wins) then
		print("ok: every player can win")
	else
		print("not every player can win")
	end
	if sat(T3,Big) then
		print("more players can be on turn")
	else
		print("ok: only one player can be on turn")
	end
	if sat(T4,Small) then
		print("there is a game not ending")
	else
		print("ok: every game comes to an end")
	end
	if sat(T5,Small) then
		print("it is possible that the game is over with full heaps")
	else
		print("ok: when gameover, heaps are empty")
	end
	if sat(T7,Small) then
		print("ok: However, the formula is not entailed by our theory. This formula was crappy")
	else
		print("Formula is entailed")
	end
}
	
	
